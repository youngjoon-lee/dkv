// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dkv/v0/replication.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicationClient is the client API for Replication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicationClient interface {
	AppendLogs(ctx context.Context, opts ...grpc.CallOption) (Replication_AppendLogsClient, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error)
}

type replicationClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationClient(cc grpc.ClientConnInterface) ReplicationClient {
	return &replicationClient{cc}
}

func (c *replicationClient) AppendLogs(ctx context.Context, opts ...grpc.CallOption) (Replication_AppendLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Replication_ServiceDesc.Streams[0], "/dkv.v0.Replication/AppendLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationAppendLogsClient{stream}
	return x, nil
}

type Replication_AppendLogsClient interface {
	Send(*AppendLogRequest) error
	CloseAndRecv() (*AppendLogsReply, error)
	grpc.ClientStream
}

type replicationAppendLogsClient struct {
	grpc.ClientStream
}

func (x *replicationAppendLogsClient) Send(m *AppendLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicationAppendLogsClient) CloseAndRecv() (*AppendLogsReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AppendLogsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/dkv.v0.Replication/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServer is the server API for Replication service.
// All implementations must embed UnimplementedReplicationServer
// for forward compatibility
type ReplicationServer interface {
	AppendLogs(Replication_AppendLogsServer) error
	Commit(context.Context, *CommitRequest) (*CommitReply, error)
	mustEmbedUnimplementedReplicationServer()
}

// UnimplementedReplicationServer must be embedded to have forward compatible implementations.
type UnimplementedReplicationServer struct {
}

func (UnimplementedReplicationServer) AppendLogs(Replication_AppendLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendLogs not implemented")
}
func (UnimplementedReplicationServer) Commit(context.Context, *CommitRequest) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedReplicationServer) mustEmbedUnimplementedReplicationServer() {}

// UnsafeReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationServer will
// result in compilation errors.
type UnsafeReplicationServer interface {
	mustEmbedUnimplementedReplicationServer()
}

func RegisterReplicationServer(s grpc.ServiceRegistrar, srv ReplicationServer) {
	s.RegisterService(&Replication_ServiceDesc, srv)
}

func _Replication_AppendLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicationServer).AppendLogs(&replicationAppendLogsServer{stream})
}

type Replication_AppendLogsServer interface {
	SendAndClose(*AppendLogsReply) error
	Recv() (*AppendLogRequest, error)
	grpc.ServerStream
}

type replicationAppendLogsServer struct {
	grpc.ServerStream
}

func (x *replicationAppendLogsServer) SendAndClose(m *AppendLogsReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicationAppendLogsServer) Recv() (*AppendLogRequest, error) {
	m := new(AppendLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Replication_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkv.v0.Replication/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Replication_ServiceDesc is the grpc.ServiceDesc for Replication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dkv.v0.Replication",
	HandlerType: (*ReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _Replication_Commit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendLogs",
			Handler:       _Replication_AppendLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dkv/v0/replication.proto",
}
